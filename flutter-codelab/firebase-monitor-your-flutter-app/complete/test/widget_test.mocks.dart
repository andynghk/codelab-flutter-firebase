// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_abtest/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_storage/firebase_storage.dart' as _i2;
import 'package:flutter_abtest/src/data/inventory_provider.dart' as _i4;
import 'package:flutter_abtest/src/model/product.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseStorage_0 extends _i1.Fake implements _i2.FirebaseStorage {}

class _FakeFirebaseFirestore_1 extends _i1.Fake
    implements _i3.FirebaseFirestore {}

/// A class which mocks [ShopInventoryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopInventoryProvider extends _i1.Mock
    implements _i4.ShopInventoryProvider {
  MockShopInventoryProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_0()) as _i2.FirebaseStorage);
  @override
  _i3.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_1()) as _i3.FirebaseFirestore);
  @override
  _i5.Stream<List<_i6.Product>> get shopInventory =>
      (super.noSuchMethod(Invocation.getter(#shopInventory),
              returnValue: Stream<List<_i6.Product>>.empty())
          as _i5.Stream<List<_i6.Product>>);
  @override
  set shopInventory(_i5.Stream<List<_i6.Product>>? _shopInventory) =>
      super.noSuchMethod(Invocation.setter(#shopInventory, _shopInventory),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> writeProductsToFirestore(List<_i6.Product>? products) =>
      (super.noSuchMethod(
          Invocation.method(#writeProductsToFirestore, [products]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
